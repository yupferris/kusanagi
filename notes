The device has 3 interfaces:
Found interface: 00
  Found descriptor:
    Endpoints (2):
      Address: 01
      Direction: Out
      Transfer type: Interrupt
      Address: 81
      Direction: In
      Transfer type: Interrupt
Found interface: 01
  Found descriptor:
    Endpoints (0):
  Found descriptor:
    Endpoints (2):
      Address: 08
      Direction: Out
      Transfer type: Isochronous
      Address: 87
      Direction: In
      Transfer type: Isochronous
Found interface: 02
  Found descriptor:
    Endpoints (0):
  Found descriptor:
    Endpoints (2):
      Address: 03
      Direction: Out
      Transfer type: Bulk
      Address: 83
      Direction: In
      Transfer type: Bulk

Trying the first interface first.

Initially, the device pumps these messages at a regular rate of what appears to be ~500ms:
02 20 01 1c db 44 9a ad a3 46 00 00 c6 24 2a 54 01 00 01 00 17 01 02 00 01 00 01 00 01 00 01 00
      ^- This byte starts at 01 (possibly at 00, but I haven't seen it yet) and increments each message.
         Overflow doesn't matter. All other bytes in the message are identical.

First thought is to just respond with messages of the same length, but all 00's except for fuzzing the first few bytes.

Responding with
04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
makes the device stop responding; no idea why yet. Must be unplugged + plugged back in to respond again.

Starting to suspect the first two bytes are command bytes; the rest is [related] data.

Also, 04 01 ..., 04 02 ..., 04 03 ..., stalls. Probably 04 xx ... are all the same command. Note that I haven't tested yet
with any other data than all 00's after the first two bytes, except for echoing the first messages received with the first
3 bytes replaced with "04 00 00". Still stalled. Might need to try more.

I fuzzed from 05 00 00 ... to 0b 00 00 ... (with all 00's after the first three bytes) and nothing changed.

Sometimes echoing the original data after the first three bytes with "00 00 00" makes the device stop responding. No idea
why again.

Fuzzing from 00 00 00 ... to 04 00 00 ... doesn't do anything either. Gonna try to mirror with the counter byte as well now.

If 08 3d ... is sent shortly after the first messages are received, the device starts responding with:
17 01 02 00 01 00 01 00 01 00 01 00 c6 24 2a 54 01 00 01 00 17 01 02 00 01 00 01 00 01 00 01 00
very quickly, every time! Though, if responding by more fuzzing a lot after (up to 08 75 ...), the device becomes more or
less unresponsive again. The counter byte seems to always be 02 at this point as well.

Tried to mirror everything received at this point verbatim, and accidentally sent 256 bytes every time. At this point, the
device apparently reset or something, and started only sending 02 20 messages again, but it needed to be restarted before
it started responding properly again.

The same happened when responding with the correct number of bytes. Strange.

After playing with this a bunch, it seems every time the device "stalls" as observed previously, waiting a bit seems to
resolve the issue, though unplugging seems faster :D

Sending
08 3d 00 ff ff ff ff ff ff ff ff ff c6 24 2a 54 01 00 01 00 17 01 02 00 01 00 01 00 01 00 01 00
seems to get the same input as mirroring the entire message minus the first three bytes

Interestingly, sending
08 3d ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
or
08 3d 00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
gives us back:
ff ff ff ff ff ff ff ff ff ff ff ff c6 24 2a 54 01 00 01 00 17 01 02 00 01 00 01 00 01 00 01 00
perhaps "ff ff" for the first two bytes is some kind of error? It also looks like only the first
12 bytes of the messages are significant. Need to play with that.

At this point, because fuzzing was taking a fair bit of time, I decided to break out a windows box and get some
captures (see captures/controller-cap.pcap).

The first set of messages coming from the device are ofc the same, but the initial response is simply:
04 20 01 00
      ^  ^- This looks like a message length byte now. Looks like it encodes the length of the packet after
      |     these first 4 bytes.
      +- This might echo the counter from the device; not sure. Will try with that and see what happens.

For some reason, when I send these bytes, the controller becomes unresponsive...

Other messages sent include:
01 20 01 09 00 04 20 3a 00 00 00 83 00
      ^  ^- Definitely message length now
      +- Looking less like a counter now
01 20 01 09 00 04 20 bd 00 00 00 00 00

Sending these without first sending the 04 20 message doesn't seem to do anything (as somewhat expected).
Frankly I can't seem to get ANY of these to work atm, as the first 04 20 message seems to just kill the
controller. I wonder if there's some weird metadata thing going on :/

A few messages later, these 3 packets are sent to the controller:
05 20 02 09 06 00 00 00 00 00 00 55 53
05 20 03 01 00
0a 20 04 03 00 01 14

Again, trying to send these, the controller becomes unresponsive.

Finally gave in at this point and started looking into the existing Xone-OSX and 360Controller drivers to
see if I was doing anything stupid. Didn't look like it; looked like I had the first stuff right, yet the
controller still wouldn't get past the 04 20 message. Super mad, haha. So, I decided to try and check some
dumps from those drivers to see if anything was different under the hood. Spent many hours trying to get
some usb dumps on os x, and finally found the usbtracer tool. Took a dump of the 360Controller driver
talking to the controller, and one from my driver (see the captures/usbtracer-dumps folder). They're more
or less the same on the initial config stuff, but when the data packets the driver's concerned with start
going, there appear to be tons of trash messages either going to or coming from the controller using this
driver (I'm not entirely sure how to read the usbtracer dumps yet). At this point I might try to throw
together a basic driver that just turns the controller on and nothing else without using libusb, to see
if for some reason that's the problem.

Got a basic kernel extension up and running, but it's nowhere near touching anything USB-related yet.

As it turns out, writing even basic USB drivers on OS X takes LOADS of time reading LOADS of (quite bad)
documentation about LOADS of stuff. It's taking a bit, but I'm blasting through it.

Got back from vacation, and tested the libusb driver against an official xbox one controller instead of
the third-party one I've been using. And of course, the controller powers on! Just have to change the
vendor/product ID's and that's it. This is a tiny success, but feels awesome nonetheless. But, I really
want to take the opportunity to learn what's going on with the third-party controller and why it doesn't
work the same way. So, the struggle continues.